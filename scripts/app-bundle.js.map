{"version":3,"sources":["app.js","environment.js","main.js","resources/index.js"],"names":["App","i18n","subMessage","tr","debug","testing","configure","Promise","config","warnings","wForgottenReturn","aurelia","configureAliases","use","standardConfiguration","feature","plugin","instance","i18next","with","loader","init","cache","enabled","prefix","expirationTime","setup","backend","loadPath","attributes","fallbackLng","load","ns","defaultNS","detection","order","lookupQuerystring","lookupLocalStorage","caches","developmentLogging","start","then","setRoot"],"mappings":";;;;;;;;;;;;;;;;MAIaA,cAAAA,cADZ,gEAEC,aAAYC,IAAZ,EAAkB;AAAA;;AAChB,SAAKA,IAAL,GAAYA,IAAZ;;AAEA,SAAKC,UAAL,GAAkB,KAAKD,IAAL,CAAUE,EAAV,CAAa,WAAb,CAAlB;AACD;;;;;;;;oBCTY;AACbC,WAAO,IADM;AAEbC,aAAS;AAFI;;;;;;;;UCcCC,YAAAA;;;;;;;;;;;;AANhBC,UAAQC,MAAR,CAAe;AACbC,cAAU;AACRC,wBAAkB;AADV;AADG,GAAf;;AAMO,WAASJ,SAAT,CAAmBK,OAAnB,EAA4B;AACjC,kCAAiBC,gBAAjB,CAAkC,CAAC,GAAD,EAAM,MAAN,CAAlC;AACAD,YAAQE,GAAR,CACGC,qBADH,GAEGC,OAFH,CAEW,WAFX,EAGGC,MAHH,CAGU,cAHV,EAG0B,UAACC,QAAD,EAAc;AAEpCA,eAASC,OAAT,CACGL,GADH,CACO,qBAAQM,IAAR,CAAaR,QAAQS,MAArB,CADP,EAEGP,GAFH,2CAIGQ,IAJH,CAIQ;AACJC,eAAO;AAELC,mBAAS,KAFJ;;AAKLC,kBAAQ,cALH;;AAQLC,0BAAgB,IAAI,EAAJ,GAAS,EAAT,GAAc,EAAd,GAAmB;AAR9B;AADH,OAJR;;AAkBA,aAAOR,SAASS,KAAT,CAAe;AACpBC,iBAAS;AACPC,oBAAU,8BADH,EADW;;AAKpBC,oBAAY,CAAC,MAAD,EAAS,GAAT,CALQ;AAMpBC,qBAAa,IANO;AAOpBC,cAAM,cAPc;AAQpBC,YAAI,CAAC,aAAD,CARgB;AASpBC,mBAAW,aATS;AAUpB7B,eAAO,IAVa;AAWpB8B,mBAAW;AAETC,iBAAO,CAAC,WAAD,EAAc,cAAd,EAA8B,SAA9B,EAAyC,aAAzC,CAFE;AAKTC,6BAAmB,KALV;;AAOTC,8BAAoB,YAPX;;AAUTC,kBAAQ,CAAC,cAAD,CAVC;AAXS,OAAf,CAAP;AA+BD,KAtDH;;AAwDA,QAAI,sBAAYlC,KAAhB,EAAuB;AACrBO,cAAQE,GAAR,CAAY0B,kBAAZ;AACD;;AAED,QAAI,sBAAYlC,OAAhB,EAAyB;AACvBM,cAAQE,GAAR,CAAYG,MAAZ,CAAmB,iBAAnB;AACD;;AAEDL,YAAQ6B,KAAR,GAAgBC,IAAhB,CAAqB;AAAA,aAAM9B,QAAQ+B,OAAR,EAAN;AAAA,KAArB;AACD;;;;;;;;UCjFepC,YAAAA;AAAT,WAASA,SAAT,CAAmBE,MAAnB,EAA2B,CAEjC","file":"app-bundle.js","sourcesContent":["import { inject } from 'aurelia-framework';\nimport {I18N} from 'aurelia-i18n';\n\n@inject(I18N)\nexport class App {\n  constructor(i18n) {\n    this.i18n = i18n;\n\n    this.subMessage = this.i18n.tr('Some.Test');\n  }\n}\n","export default {\n  debug: true,\n  testing: true\n};\n","import environment from './environment';\nimport {\n  Backend,\n  TCustomAttribute\n} from 'aurelia-i18n';\nimport LngDetector from 'i18next-browser-languagedetector';\n\n//Configure Bluebird Promises.\nPromise.config({\n  warnings: {\n    wForgottenReturn: false\n  }\n});\n\nexport function configure(aurelia) {\n  TCustomAttribute.configureAliases(['t', 'i18n']);\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources')\n    .plugin('aurelia-i18n', (instance) => {\n      // register backend plugin\n      instance.i18next\n        .use(Backend.with(aurelia.loader))\n        .use(LngDetector)\n        //.use(Cache)\n        .init({\n          cache: {\n            // turn on or off\n            enabled: false,\n\n            // prefix for stored languages\n            prefix: 'i18next_res_',\n\n            // expiration - 1 week\n            expirationTime: 7 * 24 * 60 * 60 * 1000\n          }\n        });\n      // adapt options to your needs (see http://i18next.com/docs/options/)\n      // make sure to return the promise of the setup method, in order to guarantee proper loading\n      return instance.setup({\n        backend: { // <-- configure backend settings\n          loadPath: '/locales/{{lng}}/{{ns}}.json' // <-- XHR settings for where to get the files from\n        },\n        //lng: 'en', //Not needed due to language detection\n        attributes: ['i18n', 't'], //Use the alias configuration described at top of configure function as well to work with globals\n        fallbackLng: 'en',\n        load: 'languageOnly',\n        ns: ['translation'],\n        defaultNS: 'translation',\n        debug: true,\n        detection: {\n          // order and from where user language should be detected\n          order: ['navigator', 'localStorage', 'htmlTag', 'querystring'], //['navigator', 'localStorage', 'cookie', 'htmlTag', 'querystring'],\n\n          // keys or params to lookup language from\n          lookupQuerystring: 'lng',\n          //lookupCookie: 'i18next',\n          lookupLocalStorage: 'i18nextLng',\n\n          // cache user language on\n          caches: ['localStorage'] // ['localStorage', 'cookie']\n\n          // optional expire and domain for set cookie\n          // cookieMinutes: 10,\n          // cookieDomain: 'myDomain',\n\n          // optional htmlTag with lang attribute, the default is:\n          // htmlTag: document.documentElement\n        }\n      });\n    });\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","export function configure(config) {\n  //config.globalResources([]);\n}\n"],"sourceRoot":".."}